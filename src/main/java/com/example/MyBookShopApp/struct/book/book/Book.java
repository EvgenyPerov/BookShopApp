package com.example.MyBookShopApp.struct.book.book;

import com.example.MyBookShopApp.struct.author.Author;
import com.example.MyBookShopApp.struct.book.file.BookFileEntity;
import com.example.MyBookShopApp.struct.book.links.Book2UserEntity;
import com.example.MyBookShopApp.struct.book.review.BookRatingEntity;
import com.example.MyBookShopApp.struct.book.review.BookReviewEntity;
import com.example.MyBookShopApp.struct.other.Tag;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.ToString;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "books")
@Data
public class Book {
    //id INT NOT NULL AUTO_INCREMENT
    @ApiModelProperty(value = "this is generated by DB", position = 1)
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    //pub_date DATE NOT NULL — дата публикации
    @ApiModelProperty(value = "date of book publication")
    @Column(name = "pub_date", columnDefinition = "DATE NOT NULL")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy hh:mm:ss")
    private Date pubDate;

    //is_bestseller TINYINT NOT NULL — книга очень популярна, является бестселлером
    @ApiModelProperty(value = "if this book is considered bestseller then isBestseller = 1 else isBestseller = 0")
    @Column(name = "is_bestseller", columnDefinition = "SMALLINT NOT NULL")
    private Integer isBestseller;

    //slug VARCHAR(255) NOT NULL — мнемонический идентификатор книги
    @ApiModelProperty(value = "mnemonical identity sequence of characters")
    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    private String slug;

    //title VARCHAR(255) NOT NULL — название книги
    @ApiModelProperty(value = "title of book")
    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    private String title;

    //image VARCHAR(255) — изображение обложки
    @ApiModelProperty(value = "image URL for book")
    @Column(columnDefinition = "VARCHAR(255)")
    private String image;

    //description TEXT — описание книги
    @ApiModelProperty(value = "description for book")
    @Column(columnDefinition = "TEXT")
    private String description;

    //price_old INT NOT NULL — цена в рублях основная
    @ApiModelProperty(value = "book price without discount")
    @Column(columnDefinition = "INT NOT NULL")
    private double price;

    //discount (бывший price) TINYINT NOT NULL DEFAULT 0 — скидка в процентах или 0, если её нет
    @ApiModelProperty(value = "discount for book")
    @Column(columnDefinition = "SMALLINT NOT NULL DEFAULT 0")
    private int discount;

    @ApiModelProperty(value = "количество пользователей, купивших книгу")
    @Column(name = "count_of_buy", columnDefinition = "INT NOT NULL DEFAULT 0")
    private int countOfBuy;

    @ApiModelProperty(value = "количество пользователей, у которых книга находится в корзине")
    @Column(name = "count_of_cart",columnDefinition = "INT NOT NULL DEFAULT 0")
    private int countOfCart;

    @ApiModelProperty(value = " количество пользователей, у которых книга отложена")
    @Column(name = "count_of_postponed",columnDefinition = "INT NOT NULL DEFAULT 0")
    private int countOfPostponed;

    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "author_id", referencedColumnName = "id")
    private Author author;

    @JsonIgnore
    @ManyToMany
    @JoinTable(name = "books2tags",
            joinColumns = @JoinColumn (name = "book_id"),
            inverseJoinColumns = @JoinColumn (name = "tag_id"))
    private List<Tag> tagList = new ArrayList<>();

    @JsonIgnore
    @OneToMany(mappedBy = "book")
    private List<BookFileEntity> bookFileList = new ArrayList<>();

    @JsonIgnore
    @OneToMany(mappedBy = "book")
    private List<Book2UserEntity> book2UserEntities = new ArrayList<>();

    @JsonIgnore
    @OneToMany(mappedBy = "book")
    private List<BookRatingEntity> bookRatingEntities = new ArrayList<>();

    @JsonIgnore
    @OneToMany(mappedBy = "book")
    private List<BookReviewEntity> bookReviewEntities = new ArrayList<>();
    @JsonProperty
    public double discountPrice(){
        return discount>0 ? price - (price*discount)/100 : price;
    }

    @JsonGetter("authors")
    public String authorName(){
        return author.getName();
    }

    @Override
    public String toString() {
        return "Book{" +
                "id=" + id +
                ", pubDate=" + pubDate +
                ", isBestseller=" + isBestseller +
                ", slug='" + slug + '\'' +
                ", title='" + title + '\'' +
                ", image='" + image + '\'' +
                ", description='" + description + '\'' +
                ", price=" + price +
                ", discount=" + discount +
                ", tagList=" + tagList +
                '}';
    }
}
